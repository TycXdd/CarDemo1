<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--  Spring的基本配置  -->
    <!--  组件扫描：实例化指定路径下所有加了@Controller\@Service\@Repository  -->
    <context:component-scan base-package="com.qfedu.demo"></context:component-scan>

    <!--HikariCP连接池-->
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/car?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8"></property>
        <property name="username" value="root"></property>
        <property name="password" value="123456"></property>

        <property name="maximumPoolSize" value="10"></property>
        <property name="minimumIdle" value="10"></property>
        <property name="maxLifetime" value="1800000"></property>
    </bean>
    <!-- 事务管理器：在Service的代理中进行事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 启动注解驱动的事务 其实也就是可以在方法加入前注解来配置事务 -->
    <tx:annotation-driven></tx:annotation-driven>


    <!--  Spring MVC的基本配置  -->
    <!--  启动注解驱动的MVC 会配置新的特殊组件， 如：映射处理器等  -->
    <mvc:annotation-driven></mvc:annotation-driven>
    <!--  处理静态资源的请求  -->
    <mvc:resources mapping="/css/**" location="/css/"></mvc:resources>

    <mvc:resources mapping="/js/**" location="/js/"></mvc:resources>
    <mvc:resources mapping="/layui/**" location="/layui/"></mvc:resources>
    <!--  配置视图解析器：主要是覆盖视图解析器的前后缀  -->
    <mvc:view-resolvers>
        <mvc:jsp prefix="/" suffix=".jsp"></mvc:jsp>
    </mvc:view-resolvers>

    <mvc:interceptors>
        <mvc:interceptor>
            <!--配置拦截器的作用路径-->
            <mvc:mapping path="/mymain"/>
            <mvc:mapping path="/myinfo"/>
            <!--定义在<mvc:interceptor>下面的表示匹配指定路径的请求才进行拦截-->
            <bean class="com.qfedu.demo.sysView.sysInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--  Mybatis的基本配置  -->
    <!--  配置sqlSessionFactory  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
        <property name="configLocation" value="classpath:mybatisxml.xml"></property>
    </bean>
    <!--  扫描指定包下的Dao接口，生产Dao接口的代理实现  -->
    <bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.qfedu.demo.**.dao"></property>
    </bean>

    <!--  Mybatis的基本配置  -->

</beans>